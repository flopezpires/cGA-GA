 >num_bits=256
 >population=300
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
 > gen 104
 > gen 105
 > gen 106
 > gen 107
 > gen 108
 > gen 109
 > gen 110
 > gen 111
 > gen 112
 > gen 113
 > gen 114
 > gen 115
 > gen 116
 > gen 117
 > gen 118
 > gen 119
 > gen 120
 > gen 121
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 80658460
Fiber ID: 81890850
Total: 148.240000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.93     22.136    22.136     0.000     0.000 18887792   String#[]
 14.60     21.640    21.640     0.000     0.000 18816000   String#chr
  7.77     11.612    11.512     0.000     0.100  9592221   Kernel#rand
  0.41    146.836     0.604     0.000   146.232      245   Array#each
  0.32      0.972     0.472     0.000     0.500    36600   Object#crossover
  0.21      0.392     0.312     0.000     0.080      300   Range#each
  0.21      0.468     0.308     0.000     0.160      122   Array#sort!
  0.16      0.444     0.232     0.000     0.212    36600   Object#binary_tournament
  0.16    147.840     0.232     0.000   147.608    73501  *Integer#times
  0.11      0.168     0.168     0.000     0.000   110100   Hash#[]=
  0.11      0.164     0.164     0.000     0.000   159107   Fixnum#<=>
  0.11     50.460     0.160     0.000    50.300    36900   Object#onemax
  0.11     94.576     0.160     0.000    94.416    36600   Object#point_mutation
  0.09      0.140     0.140     0.000     0.000    72092   <Class::Range>#allocate
  0.07      0.100     0.100     0.000     0.000   109221   Kernel#respond_to_missing?
  0.06      0.928     0.088     0.000     0.840      123   Array#initialize
  0.04      0.056     0.056     0.000     0.000    36600   Fixnum#modulo
  0.03      0.044     0.044     0.000     0.000    36600   Float#>=
  0.00      0.396     0.004     0.000     0.392      300   Object#random_bitstring
  0.00    148.240     0.000     0.000   148.240        1   Object#search
  0.00      0.000     0.000     0.000     0.000      244   IO#write
  0.00      0.000     0.000     0.000     0.000      216   Array#first
  0.00     96.184     0.000     0.000    96.184      122   Object#reproduce
  0.00     96.184     0.000     0.000    96.184      122   Enumerable#each_with_index
  0.00      0.392     0.000     0.000     0.392      300   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000      122   Fixnum#to_s
  0.00      0.000     0.000     0.000     0.000      122   Kernel#puts
  0.00      0.000     0.000     0.000     0.000      122   IO#puts
  0.00      0.000     0.000     0.000     0.000      123   <Class::Array>#allocate
  0.00      0.928     0.000     0.000     0.928      123   Class#new
  0.00      0.004     0.000     0.000     0.004        1   Array#sort

* indicates recursively called methods
