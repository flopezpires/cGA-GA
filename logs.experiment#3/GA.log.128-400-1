 >num_bits=128
 >population=400
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 76748820
Fiber ID: 77983100
Total: 60.552000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.56      9.424     9.424     0.000     0.000  7377280   String#[]
 14.45      8.752     8.752     0.000     0.000  7321600   String#chr
  7.54      4.624     4.564     0.000     0.060  3799502   Kernel#rand
  0.86     59.460     0.520     0.000    58.940      143   Array#each
  0.79      0.852     0.476     0.000     0.376    28400   Object#crossover
  0.39      0.364     0.236     0.000     0.128       71   Array#sort!
  0.30      0.392     0.180     0.000     0.212    28400   Object#binary_tournament
  0.30      0.260     0.180     0.000     0.080      400   Range#each
  0.28     37.132     0.172     0.000    36.960    28400   Object#point_mutation
  0.28      0.168     0.168     0.000     0.000    85600   Hash#[]=
  0.27     20.764     0.164     0.000    20.600    28800   Object#onemax
  0.24     60.272     0.144     0.000    60.128    57201  *Integer#times
  0.21      0.128     0.128     0.000     0.000   119540   Fixnum#<=>
  0.13      0.080     0.080     0.000     0.000    56080   <Class::Range>#allocate
  0.11      0.720     0.068     0.000     0.652       72   Array#initialize
  0.10      0.060     0.060     0.000     0.000    84702   Kernel#respond_to_missing?
  0.07      0.044     0.044     0.000     0.000    28400   Float#>=
  0.04      0.024     0.024     0.000     0.000    28400   Fixnum#modulo
  0.01      0.008     0.008     0.000     0.000        1   Array#sort
  0.00     60.552     0.000     0.000    60.552        1   Global#[No method]
  0.00     60.552     0.000     0.000    60.552        1   Object#search
  0.00      0.000     0.000     0.000     0.000       71   Kernel#puts
  0.00     38.552     0.000     0.000    38.552       71   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000       71   Fixnum#to_s
  0.00      0.260     0.000     0.000     0.260      400   Enumerable#inject
  0.00     38.552     0.000     0.000    38.552       71   Object#reproduce
  0.00      0.260     0.000     0.000     0.260      400   Object#random_bitstring
  0.00      0.000     0.000     0.000     0.000       71   IO#puts
  0.00      0.000     0.000     0.000     0.000       72   <Class::Array>#allocate
  0.00      0.720     0.000     0.000     0.720       72   Class#new
  0.00      0.000     0.000     0.000     0.000      128   Array#first
  0.00      0.000     0.000     0.000     0.000      142   IO#write

* indicates recursively called methods
