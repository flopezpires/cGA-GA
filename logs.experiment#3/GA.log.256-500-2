 >num_bits=256
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 68368400
Fiber ID: 69167470
Total: 204.192000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.44     31.520    31.520     0.000     0.000 25826002   String#[]
 14.84     30.300    30.300     0.000     0.000 25728000   String#chr
  7.43     15.344    15.180     0.000     0.164 13127098   Kernel#rand
  0.46    202.056     0.936     0.000   201.120      201   Array#each
  0.36      1.404     0.740     0.000     0.664    50000   Object#crossover
  0.24      0.652     0.500     0.000     0.152      500   Range#each
  0.22      0.708     0.456     0.000     0.252      100   Array#sort!
  0.19    203.516     0.396     0.000   203.120   100501  *Integer#times
  0.15      0.656     0.312     0.000     0.344    50000   Object#binary_tournament
  0.14     70.216     0.280     0.000    69.936    50500   Object#onemax
  0.12      0.252     0.252     0.000     0.000   228375   Fixnum#<=>
  0.12      0.252     0.252     0.000     0.000   150500   Hash#[]=
  0.11    129.188     0.232     0.000   128.956    50000   Object#point_mutation
  0.08      0.164     0.164     0.000     0.000   149098   Kernel#respond_to_missing?
  0.07      0.144     0.144     0.000     0.000    98502   <Class::Range>#allocate
  0.04      1.404     0.088     0.000     1.316      101   Array#initialize
  0.03      0.060     0.060     0.000     0.000    50000   Fixnum#modulo
  0.03      0.056     0.056     0.000     0.000    50000   Float#>=
  0.01      0.012     0.012     0.000     0.000        1   Array#sort
  0.00      0.004     0.004     0.000     0.000      200   IO#write
  0.00    131.652     0.004     0.000   131.648      100   Enumerable#each_with_index
  0.00      0.656     0.004     0.000     0.652      500   Enumerable#inject
  0.00      0.660     0.004     0.000     0.656      500   Object#random_bitstring
  0.00      1.404     0.000     0.000     1.404      101   Class#new
  0.00      0.000     0.000     0.000     0.000      182   Array#first
  0.00      0.000     0.000     0.000     0.000      100   Fixnum#to_s
  0.00    131.652     0.000     0.000   131.652      100   Object#reproduce
  0.00      0.004     0.000     0.000     0.004      100   IO#puts
  0.00      0.000     0.000     0.000     0.000      101   <Class::Array>#allocate
  0.00      0.004     0.000     0.000     0.004      100   Kernel#puts

* indicates recursively called methods
