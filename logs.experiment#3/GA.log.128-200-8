 >num_bits=128
 >population=200
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 80924700
Fiber ID: 82157160
Total: 37.164000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.70      5.836     5.836     0.000     0.000  4668894   String#[]
 14.41      5.356     5.356     0.000     0.000  4633600   String#chr
  7.59      2.864     2.820     0.000     0.044  2401320   Kernel#rand
  0.79     36.544     0.292     0.000    36.252      181   Array#each
  0.47      0.400     0.176     0.000     0.224    18000   Object#crossover
  0.40      0.216     0.148     0.000     0.068       90   Array#sort!
  0.36      0.248     0.132     0.000     0.116    18000   Object#binary_tournament
  0.36     23.348     0.132     0.000    23.216    18000   Object#point_mutation
  0.30      0.132     0.112     0.000     0.020      200   Range#each
  0.26     12.432     0.096     0.000    12.336    18200   Object#onemax
  0.20     37.028     0.076     0.000    36.952    36201  *Integer#times
  0.18      0.068     0.068     0.000     0.000    72800   Fixnum#<=>
  0.15      0.056     0.056     0.000     0.000    35494   <Class::Range>#allocate
  0.15      0.056     0.056     0.000     0.000    54200   Hash#[]=
  0.12      0.044     0.044     0.000     0.000    53720   Kernel#respond_to_missing?
  0.08      0.028     0.028     0.000     0.000    18000   Float#>=
  0.04      0.396     0.016     0.000     0.380       91   Array#initialize
  0.04      0.016     0.016     0.000     0.000    18000   Fixnum#modulo
  0.01     24.052     0.004     0.000    24.048       90   Object#reproduce
  0.01      0.004     0.004     0.000     0.000        1   Array#sort
  0.00     37.164     0.000     0.000    37.164        1   Object#search
  0.00      0.000     0.000     0.000     0.000      180   IO#write
  0.00      0.000     0.000     0.000     0.000      153   Array#first
  0.00     24.048     0.000     0.000    24.048       90   Enumerable#each_with_index
  0.00      0.132     0.000     0.000     0.132      200   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000       90   Fixnum#to_s
  0.00      0.132     0.000     0.000     0.132      200   Object#random_bitstring
  0.00      0.000     0.000     0.000     0.000       90   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       91   <Class::Array>#allocate
  0.00      0.396     0.000     0.000     0.396       91   Class#new
  0.00      0.000     0.000     0.000     0.000       90   IO#puts

* indicates recursively called methods
