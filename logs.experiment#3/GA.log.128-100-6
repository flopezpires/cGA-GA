 >num_bits=128
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 79829020
Fiber ID: 81061000
Total: 18.608000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.10      2.624     2.624     0.000     0.000  2291200   String#chr
 13.93      2.592     2.592     0.000     0.000  2308662   String#[]
  8.00      1.492     1.488     0.000     0.004  1187524   Kernel#rand
  0.97     18.324     0.180     0.000    18.144      179   Array#each
  0.52      0.172     0.096     0.000     0.076     8900   Object#crossover
  0.45      0.120     0.084     0.000     0.036     8900   Object#binary_tournament
  0.30      0.084     0.056     0.000     0.028       89   Array#sort!
  0.30      6.284     0.056     0.000     6.228     9000   Object#onemax
  0.28      0.060     0.052     0.000     0.008      100   Range#each
  0.19     18.544     0.036     0.000    18.508    17901  *Integer#times
  0.15      0.028     0.028     0.000     0.000    26800   Hash#[]=
  0.15     11.660     0.028     0.000    11.632     8900   Object#point_mutation
  0.15      0.028     0.028     0.000     0.000    34421   Fixnum#<=>
  0.06      0.012     0.012     0.000     0.000     8900   Float#>=
  0.06      0.196     0.012     0.000     0.184       90   Array#initialize
  0.04      0.008     0.008     0.000     0.000    17562   <Class::Range>#allocate
  0.02      0.004     0.004     0.000     0.000    26624   Kernel#respond_to_missing?
  0.02      0.064     0.004     0.000     0.060      100   Object#random_bitstring
  0.00     18.608     0.000     0.000    18.608        1   Object#search
  0.00     18.608     0.000     0.000    18.608        1   Global#[No method]
  0.00      0.000     0.000     0.000     0.000        1   Array#sort
  0.00      0.000     0.000     0.000     0.000      141   Array#first
  0.00     11.984     0.000     0.000    11.984       89   Object#reproduce
  0.00     11.984     0.000     0.000    11.984       89   Enumerable#each_with_index
  0.00      0.060     0.000     0.000     0.060      100   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000     8900   Fixnum#modulo
  0.00      0.000     0.000     0.000     0.000       89   Fixnum#to_s
  0.00      0.000     0.000     0.000     0.000       89   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       90   <Class::Array>#allocate
  0.00      0.196     0.000     0.000     0.196       90   Class#new
  0.00      0.000     0.000     0.000     0.000       89   IO#puts
  0.00      0.000     0.000     0.000     0.000      178   IO#write

* indicates recursively called methods
