 >num_bits=128
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 83945500
Fiber ID: 85177940
Total: 15.948000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.27      2.276     2.276     0.000     0.000  1958400   String#chr
 14.00      2.232     2.232     0.000     0.000  1973308   String#[]
  7.88      1.276     1.256     0.000     0.020  1015937   Kernel#rand
  0.70     15.628     0.112     0.000    15.516      153   Array#each
  0.53      0.188     0.084     0.000     0.104     7600   Object#crossover
  0.43      0.148     0.068     0.000     0.080     7600   Object#binary_tournament
  0.38      0.072     0.060     0.000     0.012       76   Array#sort!
  0.33      0.068     0.052     0.000     0.016      100   Range#each
  0.33      5.328     0.052     0.000     5.276     7700   Object#onemax
  0.28     15.876     0.044     0.000    15.832    15301  *Integer#times
  0.28      0.044     0.044     0.000     0.000    22900   Hash#[]=
  0.25      9.944     0.040     0.000     9.904     7600   Object#point_mutation
  0.13      0.020     0.020     0.000     0.000    22737   Kernel#respond_to_missing?
  0.10      0.016     0.016     0.000     0.000     7600   Float#>=
  0.08      0.012     0.012     0.000     0.000    30216   Fixnum#<=>
  0.08      0.012     0.012     0.000     0.000     7600   Fixnum#modulo
  0.08      0.228     0.012     0.000     0.216       77   Array#initialize
  0.08      0.012     0.012     0.000     0.000    15008   <Class::Range>#allocate
  0.03     10.268     0.004     0.000    10.264       76   Object#reproduce
  0.03      0.004     0.004     0.000     0.000      152   IO#write
  0.03      0.004     0.004     0.000     0.000        1   Array#sort
  0.00     15.948     0.000     0.000    15.948        1   Global#[No method]
  0.00     15.948     0.000     0.000    15.948        1   Object#search
  0.00      0.068     0.000     0.000     0.068      100   Object#random_bitstring
  0.00      0.068     0.000     0.000     0.068      100   Enumerable#inject
  0.00      0.004     0.000     0.000     0.004       76   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       76   Fixnum#to_s
  0.00      0.004     0.000     0.000     0.004       76   IO#puts
  0.00      0.000     0.000     0.000     0.000       77   <Class::Array>#allocate
  0.00      0.228     0.000     0.000     0.228       77   Class#new
  0.00     10.264     0.000     0.000    10.264       76   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000      133   Array#first

* indicates recursively called methods
