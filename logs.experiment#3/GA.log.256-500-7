 >num_bits=256
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
 > gen 104
 > gen 105
 > gen 106
 > gen 107
 > gen 108
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 68055060
Fiber ID: 69284290
Total: 221.664000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.18     33.648    33.648     0.000     0.000 28138806   String#[]
 14.54     32.224    32.224     0.000     0.000 28032000   String#chr
  7.76     17.420    17.200     0.000     0.220 14297011   Kernel#rand
  0.44    219.448     0.980     0.000   218.468      219   Array#each
  0.29      1.452     0.648     0.000     0.804    54500   Object#crossover
  0.24      0.648     0.524     0.000     0.124      500   Range#each
  0.22      0.688     0.484     0.000     0.204      109   Array#sort!
  0.19    220.988     0.412     0.000   220.576   109501  *Integer#times
  0.18      0.784     0.408     0.000     0.376    54500   Object#binary_tournament
  0.14    141.636     0.300     0.000   141.336    54500   Object#point_mutation
  0.12     75.092     0.276     0.000    74.816    55000   Object#onemax
  0.11      0.244     0.244     0.000     0.000   164000   Hash#[]=
  0.10      0.220     0.220     0.000     0.000   162511   Kernel#respond_to_missing?
  0.09      0.208     0.208     0.000     0.000   242729   Fixnum#<=>
  0.08      0.188     0.188     0.000     0.000   107306   <Class::Range>#allocate
  0.03      1.520     0.076     0.000     1.444      110   Array#initialize
  0.03      0.064     0.064     0.000     0.000    54500   Float#>=
  0.02      0.044     0.044     0.000     0.000    54500   Fixnum#modulo
  0.00      0.660     0.004     0.000     0.656      500   Object#random_bitstring
  0.00      0.652     0.004     0.000     0.648      500   Enumerable#inject
  0.00      0.008     0.004     0.000     0.004        1   Array#sort
  0.00    221.664     0.000     0.000   221.664        1   Global#[No method]
  0.00      1.520     0.000     0.000     1.520      110   Class#new
  0.00      0.000     0.000     0.000     0.000      109   Fixnum#to_s
  0.00    144.088     0.000     0.000   144.088      109   Enumerable#each_with_index
  0.00    144.088     0.000     0.000   144.088      109   Object#reproduce
  0.00      0.000     0.000     0.000     0.000      218   IO#write
  0.00      0.000     0.000     0.000     0.000      109   IO#puts
  0.00      0.000     0.000     0.000     0.000      110   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000      198   Array#first
  0.00      0.000     0.000     0.000     0.000      109   Kernel#puts

* indicates recursively called methods
