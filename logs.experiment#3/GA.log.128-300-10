 >num_bits=128
 >population=300
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 75018260
Fiber ID: 76252710
Total: 38.460000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.18      5.452     5.452     0.000     0.000  4723200   String#chr
 13.85      5.328     5.328     0.000     0.000  4759122   String#[]
  7.39      2.888     2.844     0.000     0.044  2453734   Kernel#rand
  0.71     37.712     0.272     0.000    37.440      123   Array#each
  0.48      0.240     0.184     0.000     0.056       61   Array#sort!
  0.46      0.204     0.176     0.000     0.028      300   Range#each
  0.46      0.348     0.176     0.000     0.172    18300   Object#crossover
  0.43      0.256     0.164     0.000     0.092    18300   Object#binary_tournament
  0.29     12.804     0.112     0.000    12.692    18600   Object#onemax
  0.28     38.248     0.108     0.000    38.140    36901  *Integer#times
  0.18     24.224     0.068     0.000    24.156    18300   Object#point_mutation
  0.15      0.056     0.056     0.000     0.000    77783   Fixnum#<=>
  0.11      0.044     0.044     0.000     0.000    54634   Kernel#respond_to_missing?
  0.11      0.044     0.044     0.000     0.000    55200   Hash#[]=
  0.10      0.040     0.040     0.000     0.000    36222   <Class::Range>#allocate
  0.09      0.496     0.036     0.000     0.460       62   Array#initialize
  0.08      0.032     0.032     0.000     0.000    18300   Float#>=
  0.05      0.020     0.020     0.000     0.000    18300   Fixnum#modulo
  0.02      0.008     0.008     0.000     0.000        1   Array#sort
  0.01      0.500     0.004     0.000     0.496       62   Class#new
  0.00     38.460     0.000     0.000    38.460        1   Global#[No method]
  0.00     38.460     0.000     0.000    38.460        1   Object#search
  0.00      0.204     0.000     0.000     0.204      300   Object#random_bitstring
  0.00     24.864     0.000     0.000    24.864       61   Enumerable#each_with_index
  0.00      0.204     0.000     0.000     0.204      300   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000       61   Fixnum#to_s
  0.00     24.864     0.000     0.000    24.864       61   Object#reproduce
  0.00      0.000     0.000     0.000     0.000       61   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       62   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000       61   IO#puts
  0.00      0.000     0.000     0.000     0.000      108   Array#first
  0.00      0.000     0.000     0.000     0.000      122   IO#write

* indicates recursively called methods
