 >num_bits=256
 >population=300
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
 > gen 104
 > gen 105
 > gen 106
 > gen 107
 > gen 108
 > gen 109
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 80082960
Fiber ID: 80881470
Total: 133.856000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.92     19.972    19.972     0.000     0.000 17037414   String#[]
 14.65     19.604    19.604     0.000     0.000 16972800   String#chr
  7.64     10.304    10.232     0.000     0.072  8656225   Kernel#rand
  0.38    132.512     0.512     0.000   132.000      221   Array#each
  0.32      0.832     0.424     0.000     0.408    33000   Object#crossover
  0.23      0.400     0.312     0.000     0.088      300   Range#each
  0.21      0.468     0.280     0.000     0.188    33000   Object#binary_tournament
  0.20    133.444     0.264     0.000   133.180    66301  *Integer#times
  0.19      0.404     0.260     0.000     0.144      110   Array#sort!
  0.14     45.332     0.192     0.000    45.140    33300   Object#onemax
  0.11     85.692     0.152     0.000    85.540    33000   Object#point_mutation
  0.11      0.148     0.148     0.000     0.000   143888   Fixnum#<=>
  0.10      0.128     0.128     0.000     0.000    64914   <Class::Range>#allocate
  0.09      0.120     0.120     0.000     0.000    99300   Hash#[]=
  0.05      0.072     0.072     0.000     0.000    98425   Kernel#respond_to_missing?
  0.04      0.928     0.060     0.000     0.868      111   Array#initialize
  0.02      0.024     0.024     0.000     0.000    33000   Fixnum#modulo
  0.01      0.020     0.020     0.000     0.000    33000   Float#>=
  0.00      0.008     0.004     0.000     0.004        1   Array#sort
  0.00      0.000     0.000     0.000     0.000      220   IO#write
  0.00      0.000     0.000     0.000     0.000      196   Array#first
  0.00     87.044     0.000     0.000    87.044      110   Object#reproduce
  0.00     87.044     0.000     0.000    87.044      110   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000      110   Fixnum#to_s
  0.00      0.400     0.000     0.000     0.400      300   Enumerable#inject
  0.00      0.928     0.000     0.000     0.928      111   Class#new
  0.00      0.400     0.000     0.000     0.400      300   Object#random_bitstring
  0.00      0.000     0.000     0.000     0.000      110   IO#puts
  0.00      0.000     0.000     0.000     0.000      111   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000      110   Kernel#puts

* indicates recursively called methods
