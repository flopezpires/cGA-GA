 >num_bits=128
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
 > gen 104
 > gen 105
 > gen 106
 > gen 107
 > gen 108
 > gen 109
 > gen 110
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 77125660
Fiber ID: 78358130
Total: 23.220000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.64      3.632     3.632     0.000     0.000  2876166   String#[]
 12.85      2.984     2.984     0.000     0.000  2854400   String#chr
  7.96      1.872     1.848     0.000     0.024  1477898   Kernel#rand
  0.71     22.860     0.164     0.000    22.696      223   Array#each
  0.57      0.292     0.132     0.000     0.160    11100   Object#crossover
  0.48      0.136     0.112     0.000     0.024      111   Array#sort!
  0.28      0.120     0.064     0.000     0.056    11100   Object#binary_tournament
  0.24      7.992     0.056     0.000     7.936    11200   Object#onemax
  0.24      0.068     0.056     0.000     0.012      100   Range#each
  0.22      0.052     0.052     0.000     0.000    33400   Hash#[]=
  0.22     23.148     0.052     0.000    23.096    22301  *Integer#times
  0.21     14.348     0.048     0.000    14.300    11100   Object#point_mutation
  0.12      0.028     0.028     0.000     0.000    21866   <Class::Range>#allocate
  0.10      0.024     0.024     0.000     0.000    41735   Fixnum#<=>
  0.10      0.024     0.024     0.000     0.000    33198   Kernel#respond_to_missing?
  0.10      0.212     0.024     0.000     0.188      112   Array#initialize
  0.09      0.020     0.020     0.000     0.000    11100   Float#>=
  0.05      0.012     0.012     0.000     0.000    11100   Fixnum#modulo
  0.02      0.216     0.004     0.000     0.212      112   Class#new
  0.02      0.004     0.004     0.000     0.000      111   Kernel#puts
  0.00     23.220     0.000     0.000    23.220        1   Object#search
  0.00     23.220     0.000     0.000    23.220        1   Global#[No method]
  0.00      0.000     0.000     0.000     0.000        1   Array#sort
  0.00      0.000     0.000     0.000     0.000      192   Array#first
  0.00      0.068     0.000     0.000     0.068      100   Enumerable#inject
  0.00     14.824     0.000     0.000    14.824      111   Object#reproduce
  0.00      0.068     0.000     0.000     0.068      100   Object#random_bitstring
  0.00     14.824     0.000     0.000    14.824      111   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000      112   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000      111   Fixnum#to_s
  0.00      0.000     0.000     0.000     0.000      111   IO#puts
  0.00      0.000     0.000     0.000     0.000      222   IO#write

* indicates recursively called methods
