 >num_bits=256
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 71780380
Fiber ID: 73012340
Total: 188.260000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.01     28.252    28.252     0.000     0.000 23770194   String#[]
 14.76     27.780    27.780     0.000     0.000 23680000   String#chr
  7.82     14.904    14.728     0.000     0.176 12087196   Kernel#rand
  0.39    186.252     0.736     0.000   185.516      185   Array#each
  0.34      1.176     0.632     0.000     0.544    46000   Object#crossover
  0.26      0.664     0.484     0.000     0.180      500   Range#each
  0.25      0.636     0.468     0.000     0.168       92   Array#sort!
  0.21    187.568     0.404     0.000   187.164    92501  *Integer#times
  0.16      0.308     0.308     0.000     0.000   138500   Hash#[]=
  0.16      0.604     0.300     0.000     0.304    46000   Object#binary_tournament
  0.13    120.216     0.240     0.000   119.976    46000   Object#point_mutation
  0.13     63.744     0.240     0.000    63.504    46500   Object#onemax
  0.09      0.176     0.176     0.000     0.000   137196   Kernel#respond_to_missing?
  0.09      0.172     0.172     0.000     0.000   211583   Fixnum#<=>
  0.07      0.124     0.124     0.000     0.000    90694   <Class::Range>#allocate
  0.05      1.360     0.092     0.000     1.268       93   Array#initialize
  0.04      0.072     0.072     0.000     0.000    46000   Fixnum#modulo
  0.03      0.060     0.060     0.000     0.000    46000   Float#>=
  0.00      1.364     0.004     0.000     1.360       93   Class#new
  0.00      0.008     0.004     0.000     0.004        1   Array#sort
  0.00    188.260     0.000     0.000   188.260        1   Global#[No method]
  0.00    188.260     0.000     0.000   188.260        1   Object#search
  0.00      0.664     0.000     0.000     0.664      500   Object#random_bitstring
  0.00    122.304     0.000     0.000   122.304       92   Enumerable#each_with_index
  0.00      0.664     0.000     0.000     0.664      500   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000       92   Fixnum#to_s
  0.00    122.304     0.000     0.000   122.304       92   Object#reproduce
  0.00      0.000     0.000     0.000     0.000       92   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       93   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000       92   IO#puts
  0.00      0.000     0.000     0.000     0.000      168   Array#first
  0.00      0.000     0.000     0.000     0.000      184   IO#write

* indicates recursively called methods
