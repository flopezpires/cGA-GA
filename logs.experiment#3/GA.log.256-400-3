 >num_bits=256
 >population=400
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 68327440
Fiber ID: 69126590
Total: 163.564000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.05     24.620    24.620     0.000     0.000 20455226   String#[]
 14.26     23.324    23.324     0.000     0.000 20377600   String#chr
  7.59     12.516    12.416     0.000     0.100 10397704   Kernel#rand
  0.45    161.888     0.728     0.000   161.160      199   Array#each
  0.27      0.524     0.440     0.000     0.084      400   Range#each
  0.27      1.028     0.440     0.000     0.588    39600   Object#crossover
  0.22      0.528     0.352     0.000     0.176       99   Array#sort!
  0.20    163.016     0.320     0.000   162.696    79601  *Integer#times
  0.18      0.516     0.292     0.000     0.224    39600   Object#binary_tournament
  0.13      0.220     0.220     0.000     0.000   119200   Hash#[]=
  0.12    105.096     0.204     0.000   104.892    39600   Object#point_mutation
  0.11      0.176     0.176     0.000     0.000   179330   Fixnum#<=>
  0.11     54.744     0.172     0.000    54.572    40000   Object#onemax
  0.08      0.132     0.132     0.000     0.000    78026   <Class::Range>#allocate
  0.06      0.100     0.100     0.000     0.000   118104   Kernel#respond_to_missing?
  0.06      1.136     0.096     0.000     1.040      100   Array#initialize
  0.04      0.072     0.072     0.000     0.000    39600   Fixnum#modulo
  0.01      0.016     0.016     0.000     0.000    39600   Float#>=
  0.00      0.008     0.008     0.000     0.000        1   Array#sort
  0.00      1.140     0.004     0.000     1.136      100   Class#new
  0.00      0.000     0.000     0.000     0.000      198   IO#write
  0.00      0.000     0.000     0.000     0.000      175   Array#first
  0.00    106.924     0.000     0.000   106.924       99   Object#reproduce
  0.00    106.924     0.000     0.000   106.924       99   Enumerable#each_with_index
  0.00      0.524     0.000     0.000     0.524      400   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000       99   Fixnum#to_s
  0.00      0.000     0.000     0.000     0.000       99   IO#puts
  0.00      0.000     0.000     0.000     0.000       99   Kernel#puts
  0.00      0.000     0.000     0.000     0.000      100   <Class::Array>#allocate
  0.00      0.524     0.000     0.000     0.524      400   Object#random_bitstring

* indicates recursively called methods
