 >num_bits=128
 >population=300
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 81506320
Fiber ID: 82305610
Total: 43.068000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.58      6.280     6.280     0.000     0.000  5378258   String#[]
 14.13      6.084     6.084     0.000     0.000  5337600   String#chr
  7.89      3.464     3.400     0.000     0.064  2770500   Kernel#rand
  0.99     42.260     0.428     0.000    41.832      139   Array#each
  0.72      0.544     0.312     0.000     0.232    20700   Object#crossover
  0.39      0.200     0.168     0.000     0.032      300   Range#each
  0.39      0.272     0.168     0.000     0.104       69   Array#sort!
  0.33      0.292     0.144     0.000     0.148    20700   Object#binary_tournament
  0.27     26.816     0.116     0.000    26.700    20700   Object#point_mutation
  0.25      0.108     0.108     0.000     0.000    88176   Fixnum#<=>
  0.24     42.860     0.104     0.000    42.756    41701  *Integer#times
  0.23     14.348     0.100     0.000    14.248    21000   Object#onemax
  0.20      0.088     0.088     0.000     0.000    62400   Hash#[]=
  0.15      0.064     0.064     0.000     0.000    61800   Kernel#respond_to_missing?
  0.14      0.060     0.060     0.000     0.000    40958   <Class::Range>#allocate
  0.08      0.036     0.036     0.000     0.000    20700   Fixnum#modulo
  0.07      0.528     0.032     0.000     0.496       70   Array#initialize
  0.05      0.020     0.020     0.000     0.000    20700   Float#>=
  0.01      0.204     0.004     0.000     0.200      300   Object#random_bitstring
  0.01      0.532     0.004     0.000     0.528       70   Class#new
  0.00     43.068     0.000     0.000    43.068        1   Object#search
  0.00     43.068     0.000     0.000    43.068        1   Global#[No method]
  0.00      0.004     0.000     0.000     0.004        1   Array#sort
  0.00      0.000     0.000     0.000     0.000      125   Array#first
  0.00      0.200     0.000     0.000     0.200      300   Enumerable#inject
  0.00     27.796     0.000     0.000    27.796       69   Object#reproduce
  0.00     27.796     0.000     0.000    27.796       69   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000       69   Fixnum#to_s
  0.00      0.000     0.000     0.000     0.000       70   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000       69   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       69   IO#puts
  0.00      0.000     0.000     0.000     0.000      138   IO#write

* indicates recursively called methods
