 >num_bits=256
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 77963280
Fiber ID: 78761840
Total: 209.892000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.05     31.596    31.596     0.000     0.000 26339912   String#[]
 14.70     30.848    30.848     0.000     0.000 26240000   String#chr
  7.48     15.840    15.704     0.000     0.136 13387043   Kernel#rand
  0.43    207.748     0.904     0.000   206.844      205   Array#each
  0.31      1.340     0.652     0.000     0.688    51000   Object#crossover
  0.26      0.656     0.552     0.000     0.104      500   Range#each
  0.23      0.660     0.492     0.000     0.168      102   Array#sort!
  0.19      0.696     0.400     0.000     0.296    51000   Object#binary_tournament
  0.19    209.220     0.392     0.000   208.828   102501  *Integer#times
  0.14      0.292     0.292     0.000     0.000   153500   Hash#[]=
  0.12     72.068     0.256     0.000    71.812    51500   Object#onemax
  0.12    133.100     0.244     0.000   132.856    51000   Object#point_mutation
  0.09      0.180     0.180     0.000     0.000   100412   <Class::Range>#allocate
  0.08      0.168     0.168     0.000     0.000   232371   Fixnum#<=>
  0.06      0.136     0.136     0.000     0.000   152043   Kernel#respond_to_missing?
  0.06      1.472     0.116     0.000     1.356      103   Array#initialize
  0.03      0.056     0.056     0.000     0.000    51000   Float#>=
  0.02      0.044     0.044     0.000     0.000    51000   Fixnum#modulo
  0.00      0.008     0.008     0.000     0.000        1   Array#sort
  0.00    135.416     0.004     0.000   135.412      102   Object#reproduce
  0.00      0.660     0.004     0.000     0.656      500   Object#random_bitstring
  0.00      1.472     0.000     0.000     1.472      103   Class#new
  0.00      0.000     0.000     0.000     0.000      204   IO#write
  0.00      0.000     0.000     0.000     0.000      179   Array#first
  0.00      0.656     0.000     0.000     0.656      500   Enumerable#inject
  0.00    135.412     0.000     0.000   135.412      102   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000      102   Fixnum#to_s
  0.00      0.000     0.000     0.000     0.000      102   IO#puts
  0.00      0.000     0.000     0.000     0.000      103   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000      102   Kernel#puts

* indicates recursively called methods
