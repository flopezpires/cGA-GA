 >num_bits=256
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 76611600
Fiber ID: 77410900
Total: 211.904000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.00     31.788    31.788     0.000     0.000 26854002   String#[]
 14.83     31.416    31.416     0.000     0.000 26752000   String#chr
  7.66     16.408    16.228     0.000     0.180 13647100   Kernel#rand
  0.37    209.740     0.788     0.000   208.952      209   Array#each
  0.30      1.288     0.636     0.000     0.652    52000   Object#crossover
  0.22      0.660     0.476     0.000     0.184      500   Range#each
  0.21      0.680     0.440     0.000     0.240      104   Array#sort!
  0.17    211.228     0.368     0.000   210.860   104501  *Integer#times
  0.16      0.680     0.348     0.000     0.332    52000   Object#binary_tournament
  0.13      0.284     0.284     0.000     0.000   156500   Hash#[]=
  0.13    135.236     0.272     0.000   134.964    52000   Object#point_mutation
  0.12     72.080     0.256     0.000    71.824    52500   Object#onemax
  0.12      0.244     0.244     0.000     0.000   231805   Fixnum#<=>
  0.08      0.180     0.180     0.000     0.000   155100   Kernel#respond_to_missing?
  0.07      0.144     0.144     0.000     0.000   102502   <Class::Range>#allocate
  0.06      1.464     0.124     0.000     1.340      105   Array#initialize
  0.03      0.064     0.064     0.000     0.000    52000   Fixnum#modulo
  0.03      0.060     0.060     0.000     0.000    52000   Float#>=
  0.00      0.012     0.008     0.000     0.004        1   Array#sort
  0.00    137.468     0.004     0.000   137.464      104   Enumerable#each_with_index
  0.00    137.472     0.004     0.000   137.468      104   Object#reproduce
  0.00      1.464     0.000     0.000     1.464      105   Class#new
  0.00      0.000     0.000     0.000     0.000      208   IO#write
  0.00      0.000     0.000     0.000     0.000      187   Array#first
  0.00      0.660     0.000     0.000     0.660      500   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000      104   Fixnum#to_s
  0.00      0.660     0.000     0.000     0.660      500   Object#random_bitstring
  0.00      0.000     0.000     0.000     0.000      104   IO#puts
  0.00      0.000     0.000     0.000     0.000      105   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000      104   Kernel#puts

* indicates recursively called methods
