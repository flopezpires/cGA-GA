 >num_bits=128
 >population=300
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 73216020
Fiber ID: 74450490
Total: 40.640000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.18      5.764     5.764     0.000     0.000  5068622   String#[]
 14.00      5.688     5.688     0.000     0.000  5030400   String#chr
  8.12      3.356     3.300     0.000     0.056  2612081   Kernel#rand
  0.78     39.904     0.316     0.000    39.588      131   Array#each
  0.52      0.448     0.212     0.000     0.236    19500   Object#crossover
  0.36      0.272     0.148     0.000     0.124    19500   Object#binary_tournament
  0.35      0.200     0.144     0.000     0.056      300   Range#each
  0.34      0.220     0.140     0.000     0.080       65   Array#sort!
  0.31     25.536     0.128     0.000    25.408    19500   Object#point_mutation
  0.27     40.436     0.108     0.000    40.328    39301  *Integer#times
  0.26     13.524     0.104     0.000    13.420    19800   Object#onemax
  0.20      0.080     0.080     0.000     0.000    81479   Fixnum#<=>
  0.17      0.068     0.068     0.000     0.000    58800   Hash#[]=
  0.14      0.056     0.056     0.000     0.000    58181   Kernel#respond_to_missing?
  0.12      0.048     0.048     0.000     0.000    38522   <Class::Range>#allocate
  0.09      0.508     0.036     0.000     0.472       66   Array#initialize
  0.06      0.024     0.024     0.000     0.000    19500   Float#>=
  0.03      0.012     0.012     0.000     0.000    19500   Fixnum#modulo
  0.01      0.004     0.004     0.000     0.000        1   Array#sort
  0.00      0.000     0.000     0.000     0.000      130   IO#write
  0.00      0.000     0.000     0.000     0.000      106   Array#first
  0.00     26.288     0.000     0.000    26.288       65   Object#reproduce
  0.00     26.288     0.000     0.000    26.288       65   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000       65   Fixnum#to_s
  0.00      0.200     0.000     0.000     0.200      300   Enumerable#inject
  0.00      0.508     0.000     0.000     0.508       66   Class#new
  0.00      0.200     0.000     0.000     0.200      300   Object#random_bitstring
  0.00      0.000     0.000     0.000     0.000       65   IO#puts
  0.00      0.000     0.000     0.000     0.000       66   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000       65   Kernel#puts

* indicates recursively called methods
