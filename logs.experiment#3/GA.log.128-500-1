 >num_bits=128
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 73652240
Fiber ID: 74450800
Total: 65.716000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.40     10.120    10.120     0.000     0.000  8189824   String#[]
 14.46      9.500     9.500     0.000     0.000  8128000   String#chr
  7.88      5.256     5.176     0.000     0.080  4221478   Kernel#rand
  0.83     64.484     0.544     0.000    63.940      127   Array#each
  0.65      0.776     0.428     0.000     0.348    31500   Object#crossover
  0.43      0.412     0.280     0.000     0.132       63   Array#sort!
  0.41      0.332     0.268     0.000     0.064      500   Range#each
  0.32      0.396     0.212     0.000     0.184    31500   Object#binary_tournament
  0.27     65.364     0.180     0.000    65.184    63501  *Integer#times
  0.26     41.004     0.168     0.000    40.836    31500   Object#point_mutation
  0.25     22.004     0.164     0.000    21.840    32000   Object#onemax
  0.20      0.132     0.132     0.000     0.000   135590   Fixnum#<=>
  0.19      0.128     0.128     0.000     0.000    95000   Hash#[]=
  0.13      0.812     0.084     0.000     0.728       64   Array#initialize
  0.12      0.080     0.080     0.000     0.000    93978   Kernel#respond_to_missing?
  0.10      0.068     0.068     0.000     0.000    62324   <Class::Range>#allocate
  0.04      0.028     0.028     0.000     0.000    31500   Fixnum#modulo
  0.03      0.020     0.020     0.000     0.000    31500   Float#>=
  0.01      0.008     0.008     0.000     0.000        1   Array#sort
  0.00      0.000     0.000     0.000     0.000      126   IO#write
  0.00      0.000     0.000     0.000     0.000      107   Array#first
  0.00     42.352     0.000     0.000    42.352       63   Object#reproduce
  0.00     42.352     0.000     0.000    42.352       63   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000       63   Fixnum#to_s
  0.00      0.332     0.000     0.000     0.332      500   Enumerable#inject
  0.00      0.812     0.000     0.000     0.812       64   Class#new
  0.00      0.332     0.000     0.000     0.332      500   Object#random_bitstring
  0.00      0.000     0.000     0.000     0.000       63   IO#puts
  0.00      0.000     0.000     0.000     0.000       64   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000       63   Kernel#puts

* indicates recursively called methods
