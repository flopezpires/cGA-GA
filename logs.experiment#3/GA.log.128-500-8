 >num_bits=128
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 79222800
Fiber ID: 80021940
Total: 62.768000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.96      9.392     9.392     0.000     0.000  7802740   String#[]
 14.32      8.988     8.988     0.000     0.000  7744000   String#chr
  8.27      5.276     5.188     0.000     0.088  4023425   Kernel#rand
  0.73     61.560     0.460     0.000    61.100      121   Array#each
  0.56      0.768     0.352     0.000     0.416    30000   Object#crossover
  0.47      0.384     0.296     0.000     0.088       60   Array#sort!
  0.46      0.332     0.288     0.000     0.044      500   Range#each
  0.35      0.412     0.220     0.000     0.192    30000   Object#binary_tournament
  0.33     62.420     0.204     0.000    62.216    60501  *Integer#times
  0.24      0.148     0.148     0.000     0.000    90500   Hash#[]=
  0.20     39.080     0.128     0.000    38.952    30000   Object#point_mutation
  0.18     21.072     0.116     0.000    20.956    30500   Object#onemax
  0.18      0.112     0.112     0.000     0.000    59240   <Class::Range>#allocate
  0.15      0.092     0.092     0.000     0.000   130519   Fixnum#<=>
  0.14      0.088     0.088     0.000     0.000    89425   Kernel#respond_to_missing?
  0.10      0.812     0.060     0.000     0.752       61   Array#initialize
  0.05      0.032     0.032     0.000     0.000    30000   Fixnum#modulo
  0.04      0.028     0.028     0.000     0.000    30000   Float#>=
  0.01      0.004     0.004     0.000     0.000       60   IO#puts
  0.01      0.340     0.004     0.000     0.336      500   Object#random_bitstring
  0.01      0.008     0.004     0.000     0.004        1   Array#sort
  0.00     62.768     0.000     0.000    62.768        1   Global#[No method]
  0.00     62.768     0.000     0.000    62.768        1   Object#search
  0.00      0.000     0.000     0.000     0.000       60   Fixnum#to_s
  0.00      0.332     0.000     0.000     0.332      500   Enumerable#inject
  0.00     40.396     0.000     0.000    40.396       60   Enumerable#each_with_index
  0.00     40.396     0.000     0.000    40.396       60   Object#reproduce
  0.00      0.004     0.000     0.000     0.004       60   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       61   <Class::Array>#allocate
  0.00      0.812     0.000     0.000     0.812       61   Class#new
  0.00      0.000     0.000     0.000     0.000      110   Array#first
  0.00      0.000     0.000     0.000     0.000      120   IO#write

* indicates recursively called methods
