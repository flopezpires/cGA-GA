 >num_bits=128
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 80234500
Fiber ID: 81256660
Total: 66.812000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.85      9.920     9.920     0.000     0.000  8318704   String#[]
 14.17      9.468     9.468     0.000     0.000  8256000   String#chr
  7.85      5.344     5.248     0.000     0.096  4287418   Kernel#rand
  0.80     65.564     0.536     0.000    65.028      129   Array#each
  0.63      0.808     0.420     0.000     0.388    32000   Object#crossover
  0.43      0.412     0.284     0.000     0.128       64   Array#sort!
  0.41      0.332     0.276     0.000     0.056      500   Range#each
  0.35      0.428     0.236     0.000     0.192    32000   Object#binary_tournament
  0.32     66.468     0.216     0.000    66.252    64501  *Integer#times
  0.23     41.736     0.156     0.000    41.580    32000   Object#point_mutation
  0.22     22.344     0.144     0.000    22.200    32500   Object#onemax
  0.19      0.128     0.128     0.000     0.000   137952   Fixnum#<=>
  0.17      0.112     0.112     0.000     0.000    96500   Hash#[]=
  0.14      0.096     0.096     0.000     0.000    95418   Kernel#respond_to_missing?
  0.12      0.080     0.080     0.000     0.000    63204   <Class::Range>#allocate
  0.09      0.824     0.060     0.000     0.764       65   Array#initialize
  0.05      0.036     0.036     0.000     0.000    32000   Float#>=
  0.04      0.028     0.028     0.000     0.000    32000   Fixnum#modulo
  0.01      0.008     0.008     0.000     0.000        1   Array#sort
  0.01      0.336     0.004     0.000     0.332      500   Enumerable#inject
  0.01      0.004     0.004     0.000     0.000      128   IO#write
  0.00     66.812     0.000     0.000    66.812        1   Object#search
  0.00      0.004     0.000     0.000     0.004       64   Kernel#puts
  0.00     43.104     0.000     0.000    43.104       64   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000       64   Fixnum#to_s
  0.00     43.104     0.000     0.000    43.104       64   Object#reproduce
  0.00      0.000     0.000     0.000     0.000      114   Array#first
  0.00      0.004     0.000     0.000     0.004       64   IO#puts
  0.00      0.000     0.000     0.000     0.000       65   <Class::Array>#allocate
  0.00      0.824     0.000     0.000     0.824       65   Class#new
  0.00      0.336     0.000     0.000     0.336      500   Object#random_bitstring

* indicates recursively called methods
