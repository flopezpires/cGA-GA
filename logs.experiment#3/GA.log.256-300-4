 >num_bits=256
 >population=300
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
 > gen 104
 > gen 105
 > gen 106
 > gen 107
 > gen 108
 > gen 109
 > gen 110
 > gen 111
 > gen 112
 > gen 113
 > gen 114
 > gen 115
 > gen 116
 > gen 117
 > gen 118
 > gen 119
 > gen 120
 > gen 121
 > gen 122
 > gen 123
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 76554260
Fiber ID: 77783540
Total: 150.488000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.15     22.792    22.792     0.000     0.000 19196112   String#[]
 14.46     21.764    21.764     0.000     0.000 19123200   String#chr
  7.84     11.880    11.792     0.000     0.088  9748172   Kernel#rand
  0.41    149.024     0.616     0.000   148.408      249   Array#each
  0.35      0.968     0.532     0.000     0.436    37200   Object#crossover
  0.21      0.480     0.320     0.000     0.160      124   Array#sort!
  0.19      0.396     0.292     0.000     0.104      300   Range#each
  0.17    150.080     0.252     0.000   149.828    74701  *Integer#times
  0.16      0.464     0.244     0.000     0.220    37200   Object#binary_tournament
  0.12     96.252     0.188     0.000    96.064    37200   Object#point_mutation
  0.11      0.160     0.160     0.000     0.000   159454   Fixnum#<=>
  0.10     51.012     0.156     0.000    50.856    37500   Object#onemax
  0.10      0.156     0.156     0.000     0.000   111900   Hash#[]=
  0.07      0.972     0.112     0.000     0.860      125   Array#initialize
  0.06      0.088     0.088     0.000     0.000   110972   Kernel#respond_to_missing?
  0.06      0.084     0.084     0.000     0.000    73212   <Class::Range>#allocate
  0.02      0.036     0.036     0.000     0.000    37200   Float#>=
  0.01      0.020     0.020     0.000     0.000    37200   Fixnum#modulo
  0.00      0.004     0.004     0.000     0.000        1   Array#sort
  0.00     97.856     0.004     0.000    97.852      124   Object#reproduce
  0.00      0.000     0.000     0.000     0.000      248   IO#write
  0.00      0.000     0.000     0.000     0.000      225   Array#first
  0.00     97.852     0.000     0.000    97.852      124   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000      124   Fixnum#to_s
  0.00      0.396     0.000     0.000     0.396      300   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000      124   Kernel#puts
  0.00      0.972     0.000     0.000     0.972      125   Class#new
  0.00      0.000     0.000     0.000     0.000      124   IO#puts
  0.00      0.000     0.000     0.000     0.000      125   <Class::Array>#allocate
  0.00      0.396     0.000     0.000     0.396      300   Object#random_bitstring

* indicates recursively called methods
