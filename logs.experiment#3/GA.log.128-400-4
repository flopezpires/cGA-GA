 >num_bits=128
 >population=400
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 82984980
Fiber ID: 84215010
Total: 54.588000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.10      8.244     8.244     0.000     0.000  6758138   String#[]
 13.89      7.580     7.580     0.000     0.000  6707200   String#chr
  7.73      4.284     4.220     0.000     0.064  3482741   Kernel#rand
  0.85     53.584     0.464     0.000    53.120      131   Array#each
  0.63      0.604     0.344     0.000     0.260    26000   Object#crossover
  0.40      0.340     0.220     0.000     0.120       65   Array#sort!
  0.34      0.260     0.184     0.000     0.076      400   Range#each
  0.29      0.336     0.156     0.000     0.180    26000   Object#binary_tournament
  0.23     54.312     0.128     0.000    54.184    52401  *Integer#times
  0.22      0.120     0.120     0.000     0.000   111376   Fixnum#<=>
  0.21      0.116     0.116     0.000     0.000    78400   Hash#[]=
  0.21     34.004     0.116     0.000    33.888    26000   Object#point_mutation
  0.16     18.368     0.088     0.000    18.280    26400   Object#onemax
  0.12      0.064     0.064     0.000     0.000    51338   <Class::Range>#allocate
  0.12      0.064     0.064     0.000     0.000    77541   Kernel#respond_to_missing?
  0.10      0.652     0.052     0.000     0.600       66   Array#initialize
  0.08      0.044     0.044     0.000     0.000    26000   Float#>=
  0.05      0.028     0.028     0.000     0.000    26000   Fixnum#modulo
  0.01      0.008     0.008     0.000     0.000        1   Array#sort
  0.01      0.264     0.004     0.000     0.260      400   Object#random_bitstring
  0.01      0.656     0.004     0.000     0.652       66   Class#new
  0.00      0.000     0.000     0.000     0.000      130   IO#write
  0.00      0.000     0.000     0.000     0.000      123   Array#first
  0.00     35.104     0.000     0.000    35.104       65   Object#reproduce
  0.00      0.260     0.000     0.000     0.260      400   Enumerable#inject
  0.00     35.104     0.000     0.000    35.104       65   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000       65   IO#puts
  0.00      0.000     0.000     0.000     0.000       65   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       66   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000       65   Fixnum#to_s

* indicates recursively called methods
