 >num_bits=512
 >population=500
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
 > gen 104
 > gen 105
 > gen 106
 > gen 107
 > gen 108
 > gen 109
 > gen 110
 > gen 111
 > gen 112
 > gen 113
 > gen 114
 > gen 115
 > gen 116
 > gen 117
 > gen 118
 > gen 119
 > gen 120
 > gen 121
 > gen 122
 > gen 123
 > gen 124
 > gen 125
 > gen 126
 > gen 127
 > gen 128
 > gen 129
 > gen 130
 > gen 131
 > gen 132
 > gen 133
 > gen 134
 > gen 135
 > gen 136
 > gen 137
 > gen 138
 > gen 139
 > gen 140
 > gen 141
 > gen 142
 > gen 143
 > gen 144
 > gen 145
 > gen 146
 > gen 147
 > gen 148
 > gen 149
 > gen 150
 > gen 151
 > gen 152
 > gen 153
 > gen 154
 > gen 155
 > gen 156
 > gen 157
 > gen 158
 > gen 159
 > gen 160
 > gen 161
 > gen 162
 > gen 163
 > gen 164
 > gen 165
 > gen 166
 > gen 167
 > gen 168
 > gen 169
 > gen 170
 > gen 171
 > gen 172
 > gen 173
 > gen 174
 > gen 175
 > gen 176
 > gen 177
 > gen 178
 > gen 179
 > gen 180
 > gen 181
 > gen 182
 > gen 183
 > gen 184
 > gen 185
 > gen 186
 > gen 187
 > gen 188
 > gen 189
 > gen 190
done! Solution: f=512, s
Measure Mode: cpu_time
Thread ID: 78845980
Fiber ID: 80077960
Total: 762.976000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 15.27    116.476   116.476     0.000     0.000 98235140   String#[]
 14.87    113.460   113.460     0.000     0.000 98048000   String#chr
  7.69     58.980    58.708     0.000     0.272 49532284   Kernel#rand
  0.22    758.872     1.696     0.000   757.176      383   Array#each
  0.15      2.352     1.164     0.000     1.188    95500   Object#crossover
  0.14      1.316     1.036     0.000     0.280      500   Range#each
  0.12      1.288     0.892     0.000     0.396      191   Array#sort!
  0.10    761.644     0.788     0.000   760.856   191501  *Integer#times
  0.08      1.272     0.636     0.000     0.636    95500   Object#binary_tournament
  0.06      0.484     0.484     0.000     0.000   287000   Hash#[]=
  0.06    491.564     0.428     0.000   491.136    95500   Object#point_mutation
  0.05    262.668     0.404     0.000   262.264    96000   Object#onemax
  0.05      0.396     0.396     0.000     0.000   435953   Fixnum#<=>
  0.04      0.272     0.272     0.000     0.000   284784   Kernel#respond_to_missing?
  0.03      0.232     0.232     0.000     0.000   187640   <Class::Range>#allocate
  0.03      2.804     0.212     0.000     2.592      192   Array#initialize
  0.01      0.108     0.108     0.000     0.000    95500   Fixnum#modulo
  0.01      0.068     0.068     0.000     0.000    95500   Float#>=
  0.00      0.012     0.012     0.000     0.000        1   Array#sort
  0.00      1.320     0.004     0.000     1.316      500   Object#random_bitstring
  0.00      2.804     0.000     0.000     2.804      192   Class#new
  0.00      0.000     0.000     0.000     0.000      382   IO#write
  0.00      0.000     0.000     0.000     0.000      344   Array#first
  0.00    495.760     0.000     0.000   495.760      191   Object#reproduce
  0.00      1.316     0.000     0.000     1.316      500   Enumerable#inject
  0.00    495.760     0.000     0.000   495.760      191   Enumerable#each_with_index
  0.00      0.000     0.000     0.000     0.000      191   IO#puts
  0.00      0.000     0.000     0.000     0.000      191   Kernel#puts
  0.00      0.000     0.000     0.000     0.000      192   <Class::Array>#allocate
  0.00      0.000     0.000     0.000     0.000      191   Fixnum#to_s

* indicates recursively called methods
