 >num_bits=128
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: cpu_time
Thread ID: 76777500
Fiber ID: 78010000
Total: 17.876000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 14.54      2.600     2.600     0.000     0.000  2214400   String#chr
 13.94      2.492     2.492     0.000     0.000  2231278   String#[]
  7.56      1.392     1.352     0.000     0.040  1147933   Kernel#rand
  0.58     17.592     0.104     0.000    17.488      173   Array#each
  0.51      0.188     0.092     0.000     0.096     8600   Object#crossover
  0.45      0.128     0.080     0.000     0.048     8600   Object#binary_tournament
  0.29      0.072     0.052     0.000     0.020       86   Array#sort!
  0.29     17.808     0.052     0.000    17.756    17301  *Integer#times
  0.27      5.936     0.048     0.000     5.888     8700   Object#onemax
  0.27      0.064     0.048     0.000     0.016      100   Range#each
  0.27      0.048     0.048     0.000     0.000    25900   Hash#[]=
  0.22      0.040     0.040     0.000     0.000    25733   Kernel#respond_to_missing?
  0.22     11.296     0.040     0.000    11.256     8600   Object#point_mutation
  0.13      0.024     0.024     0.000     0.000    32901   Fixnum#<=>
  0.11      0.020     0.020     0.000     0.000     8600   Fixnum#modulo
  0.09      0.016     0.016     0.000     0.000    16978   <Class::Range>#allocate
  0.07      0.204     0.012     0.000     0.192       87   Array#initialize
  0.07      0.012     0.012     0.000     0.000     8600   Float#>=
  0.00     17.876     0.000     0.000    17.876        1   Object#search
  0.00     17.876     0.000     0.000    17.876        1   Global#[No method]
  0.00      0.004     0.000     0.000     0.004        1   Array#sort
  0.00      0.000     0.000     0.000     0.000      146   Array#first
  0.00     11.624     0.000     0.000    11.624       86   Object#reproduce
  0.00     11.624     0.000     0.000    11.624       86   Enumerable#each_with_index
  0.00      0.064     0.000     0.000     0.064      100   Enumerable#inject
  0.00      0.000     0.000     0.000     0.000       86   Fixnum#to_s
  0.00      0.064     0.000     0.000     0.064      100   Object#random_bitstring
  0.00      0.000     0.000     0.000     0.000       86   Kernel#puts
  0.00      0.000     0.000     0.000     0.000       87   <Class::Array>#allocate
  0.00      0.204     0.000     0.000     0.204       87   Class#new
  0.00      0.000     0.000     0.000     0.000       86   IO#puts
  0.00      0.000     0.000     0.000     0.000      172   IO#write

* indicates recursively called methods
