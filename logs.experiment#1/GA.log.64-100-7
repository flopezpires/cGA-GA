 >num_bits=64
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
done! Solution: f=64, s=1111111111111111111111111111111111111111111111111111111111111111
Measure Mode: memory
Thread ID: 76130290
Fiber ID: 76888740
Total: 688.752930
Sort by: self_time

 %self      total      self      wait     child     calls  name
 37.77    260.133   260.133     0.000     0.000    10300   Hash#[]=
 31.36    319.905   216.010     0.000   103.896     3400   Object#crossover
 15.07    103.767   103.767     0.000     0.000   448272   String#[]
  2.03     17.332    13.984     0.000     3.348       35   Array#initialize
  0.43    667.397     2.949     0.000   664.448       69   Array#each
  0.37      2.660     2.551     0.000     0.109      100   Range#each
  0.26    688.753     1.777     0.000   686.976        1   Global#[No method]
  0.07      0.609     0.500     0.000     0.109        1   Array#sort
  0.06      0.441     0.441     0.000     0.000   441600   String#chr
  0.04      0.438     0.273     0.000     0.164   237562   Kernel#rand
  0.03    406.569     0.189     0.000   406.380       34   Object#reproduce
  0.03    686.976     0.189     0.000   686.786        1   Object#search
  0.03      2.844     0.184     0.000     2.660      100   Enumerable#inject
  0.03      0.184     0.184     0.000     0.000     3400   Float#>=
  0.03      0.184     0.184     0.000     0.000     3400   Fixnum#modulo
  0.02      0.811     0.170     0.000     0.641     3500   Object#onemax
  0.02    674.302     0.164     0.000   674.138     6901  *Integer#times
  0.02      0.164     0.164     0.000     0.000    13153   Fixnum#<=>
  0.02     17.660     0.164     0.000    17.496       35   Class#new
  0.02      0.164     0.164     0.000     0.000       35   <Class::Array>#allocate
  0.02      0.164     0.164     0.000     0.000       59   Array#first
  0.02      0.164     0.164     0.000     0.000     6772   <Class::Range>#allocate
  0.02      0.164     0.164     0.000     0.000    10162   Kernel#respond_to_missing?
  0.02     83.416     0.115     0.000    83.301     3400   Object#point_mutation
  0.02      0.279     0.115     0.000     0.164     3400   Object#binary_tournament
  0.02      3.068     0.115     0.000     2.953      100   Object#random_bitstring
  0.02      0.219     0.109     0.000     0.109       34   IO#puts
  0.02      0.109     0.109     0.000     0.000       34   Fixnum#to_s
  0.02      0.328     0.109     0.000     0.219       34   Kernel#puts
  0.02      0.164     0.109     0.000     0.055       34   Array#sort!
  0.02    406.380     0.109     0.000   406.271       34   Enumerable#each_with_index
  0.02      0.109     0.109     0.000     0.000       68   IO#write

* indicates recursively called methods
