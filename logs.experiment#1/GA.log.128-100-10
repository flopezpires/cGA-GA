 >num_bits=128
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: memory
Thread ID: 71206890
Fiber ID: 71965270
Total: 2399.809570
Sort by: self_time

 %self      total      self      wait     child     calls  name
 43.05   1535.024  1033.197     0.000   501.827     8200   Object#crossover
 25.68    616.383   616.383     0.000     0.000    24700   Hash#[]=
 20.91    501.698   501.698     0.000     0.000  2128092   String#[]
  1.36     36.082    32.734     0.000     3.348       83   Array#initialize
  0.28   2359.704     6.699     0.000  2353.005      165   Array#each
  0.11      2.660     2.551     0.000     0.109      100   Range#each
  0.07   2399.810     1.777     0.000  2398.032        1   Global#[No method]
  0.02      0.609     0.500     0.000     0.109        1   Array#sort
  0.02      0.441     0.441     0.000     0.000  2112000   String#chr
  0.01      0.438     0.273     0.000     0.164  1095130   Kernel#rand
  0.01   1742.626     0.189     0.000  1742.437       82   Object#reproduce
  0.01   2398.032     0.189     0.000  2397.843        1   Object#search
  0.01      2.844     0.184     0.000     2.660      100   Enumerable#inject
  0.01      0.184     0.184     0.000     0.000     8200   Float#>=
  0.01      0.184     0.184     0.000     0.000     8200   Fixnum#modulo
  0.01      0.811     0.170     0.000     0.641     8300   Object#onemax
  0.01   2385.358     0.164     0.000  2385.194    16501  *Integer#times
  0.01      0.164     0.164     0.000     0.000    31596   Fixnum#<=>
  0.01     36.410     0.164     0.000    36.246       83   Class#new
  0.01      0.164     0.164     0.000     0.000       83   <Class::Array>#allocate
  0.01      0.164     0.164     0.000     0.000      147   Array#first
  0.01      0.164     0.164     0.000     0.000    16192   <Class::Range>#allocate
  0.01      0.164     0.164     0.000     0.000    24530   Kernel#respond_to_missing?
  0.00    200.604     0.115     0.000   200.488     8200   Object#point_mutation
  0.00      0.279     0.115     0.000     0.164     8200   Object#binary_tournament
  0.00      3.068     0.115     0.000     2.953      100   Object#random_bitstring
  0.00      0.219     0.109     0.000     0.109       82   IO#puts
  0.00      0.109     0.109     0.000     0.000       82   Fixnum#to_s
  0.00      0.328     0.109     0.000     0.219       82   Kernel#puts
  0.00      0.164     0.109     0.000     0.055       82   Array#sort!
  0.00   1742.437     0.109     0.000  1742.327       82   Enumerable#each_with_index
  0.00      0.109     0.109     0.000     0.000      164   IO#write

* indicates recursively called methods
