 >num_bits=256
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
 > gen 104
 > gen 105
 > gen 106
 > gen 107
 > gen 108
 > gen 109
 > gen 110
 > gen 111
 > gen 112
 > gen 113
 > gen 114
 > gen 115
 > gen 116
 > gen 117
 > gen 118
 > gen 119
 > gen 120
 > gen 121
 > gen 122
 > gen 123
 > gen 124
 > gen 125
 > gen 126
 > gen 127
 > gen 128
 > gen 129
 > gen 130
 > gen 131
 > gen 132
 > gen 133
 > gen 134
 > gen 135
 > gen 136
 > gen 137
 > gen 138
 > gen 139
 > gen 140
 > gen 141
 > gen 142
 > gen 143
 > gen 144
 > gen 145
 > gen 146
 > gen 147
 > gen 148
 > gen 149
 > gen 150
 > gen 151
 > gen 152
 > gen 153
 > gen 154
 > gen 155
 > gen 156
 > gen 157
 > gen 158
 > gen 159
 > gen 160
 > gen 161
 > gen 162
 > gen 163
 > gen 164
 > gen 165
 > gen 166
 > gen 167
 > gen 168
 > gen 169
 > gen 170
 > gen 171
 > gen 172
 > gen 173
 > gen 174
 > gen 175
 > gen 176
 > gen 177
 > gen 178
 > gen 179
 > gen 180
 > gen 181
 > gen 182
 > gen 183
 > gen 184
 > gen 185
 > gen 186
 > gen 187
 > gen 188
 > gen 189
done! Solution: f=256, s=1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: memory
Thread ID: 80283610
Fiber ID: 81042070
Total: 9085.732422
Sort by: self_time

 %self      total      self      wait     child     calls  name
 52.49   7105.088  4768.744     0.000  2336.344    19000   Object#crossover
 25.71   2336.215  2336.215     0.000     0.000  9790824   String#[]
 15.61   1417.945  1417.945     0.000     0.000    57100   Hash#[]=
  0.82     78.270    74.922     0.000     3.348      191   Array#initialize
  0.17   9003.439    15.137     0.000  8988.303      381   Array#each
  0.03      2.660     2.551     0.000     0.109      100   Range#each
  0.02   9085.732     1.777     0.000  9083.955        1   Global#[No method]
  0.01      0.609     0.500     0.000     0.109        1   Array#sort
  0.00      0.441     0.441     0.000     0.000  9753600   String#chr
  0.00      0.438     0.273     0.000     0.164  4965379   Kernel#rand
  0.00   7584.799     0.189     0.000  7584.609      190   Object#reproduce
  0.00   9083.955     0.189     0.000  9083.766        1   Object#search
  0.00      2.844     0.184     0.000     2.660      100   Enumerable#inject
  0.00      0.184     0.184     0.000     0.000    19000   Float#>=
  0.00      0.184     0.184     0.000     0.000    19000   Fixnum#modulo
  0.00      0.811     0.170     0.000     0.641    19100   Object#onemax
  0.00   9071.281     0.164     0.000  9071.117    38101  *Integer#times
  0.00      0.164     0.164     0.000     0.000    72630   Fixnum#<=>
  0.00     78.598     0.164     0.000    78.434      191   Class#new
  0.00      0.164     0.164     0.000     0.000      191   <Class::Array>#allocate
  0.00      0.164     0.164     0.000     0.000      322   Array#first
  0.00      0.164     0.164     0.000     0.000    37324   <Class::Range>#allocate
  0.00      0.164     0.164     0.000     0.000    56779   Kernel#respond_to_missing?
  0.00    464.275     0.115     0.000   464.160    19000   Object#point_mutation
  0.00      0.279     0.115     0.000     0.164    19000   Object#binary_tournament
  0.00      3.068     0.115     0.000     2.953      100   Object#random_bitstring
  0.00      0.219     0.109     0.000     0.109      190   IO#puts
  0.00      0.109     0.109     0.000     0.000      190   Fixnum#to_s
  0.00      0.328     0.109     0.000     0.219      190   Kernel#puts
  0.00      0.164     0.109     0.000     0.055      190   Array#sort!
  0.00   7584.609     0.109     0.000  7584.500      190   Enumerable#each_with_index
  0.00      0.109     0.109     0.000     0.000      380   IO#write

* indicates recursively called methods
