 >num_bits=128
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: memory
Thread ID: 83245030
Fiber ID: 84003430
Total: 2484.750000
Sort by: self_time

 %self      total      self      wait     child     calls  name
 43.10   1588.969  1070.990     0.000   517.979     8500   Object#crossover
 25.70    638.648   638.648     0.000     0.000    25600   Hash#[]=
 20.84    517.850   517.850     0.000     0.000  2205464   String#[]
  1.36     37.254    33.906     0.000     3.348       86   Array#initialize
  0.28   2443.473     6.934     0.000  2436.539      171   Array#each
  0.10      2.660     2.551     0.000     0.109      100   Range#each
  0.07   2484.750     1.777     0.000  2482.973        1   Global#[No method]
  0.02      0.609     0.500     0.000     0.109        1   Array#sort
  0.02      0.441     0.441     0.000     0.000  2188800   String#chr
  0.01      0.438     0.273     0.000     0.164  1134742   Kernel#rand
  0.01   1804.129     0.189     0.000  1803.939       85   Object#reproduce
  0.01   2482.973     0.189     0.000  2482.783        1   Object#search
  0.01      2.844     0.184     0.000     2.660      100   Enumerable#inject
  0.01      0.184     0.184     0.000     0.000     8500   Float#>=
  0.01      0.184     0.184     0.000     0.000     8500   Fixnum#modulo
  0.01      0.811     0.170     0.000     0.641     8600   Object#onemax
  0.01   2470.299     0.164     0.000  2470.135    17101  *Integer#times
  0.01      0.164     0.164     0.000     0.000    32726   Fixnum#<=>
  0.01     37.582     0.164     0.000    37.418       86   Class#new
  0.01      0.164     0.164     0.000     0.000       86   <Class::Array>#allocate
  0.01      0.164     0.164     0.000     0.000      156   Array#first
  0.01      0.164     0.164     0.000     0.000    16764   <Class::Range>#allocate
  0.01      0.164     0.164     0.000     0.000    25442   Kernel#respond_to_missing?
  0.00    207.928     0.115     0.000   207.812     8500   Object#point_mutation
  0.00      0.279     0.115     0.000     0.164     8500   Object#binary_tournament
  0.00      3.068     0.115     0.000     2.953      100   Object#random_bitstring
  0.00      0.219     0.109     0.000     0.109       85   IO#puts
  0.00      0.109     0.109     0.000     0.000       85   Fixnum#to_s
  0.00      0.328     0.109     0.000     0.219       85   Kernel#puts
  0.00      0.164     0.109     0.000     0.055       85   Array#sort!
  0.00   1803.939     0.109     0.000  1803.830       85   Enumerable#each_with_index
  0.00      0.109     0.109     0.000     0.000      170   IO#write

* indicates recursively called methods
