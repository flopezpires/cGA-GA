 >num_bits=128
 >population=100
 > gen 0
 > gen 1
 > gen 2
 > gen 3
 > gen 4
 > gen 5
 > gen 6
 > gen 7
 > gen 8
 > gen 9
 > gen 10
 > gen 11
 > gen 12
 > gen 13
 > gen 14
 > gen 15
 > gen 16
 > gen 17
 > gen 18
 > gen 19
 > gen 20
 > gen 21
 > gen 22
 > gen 23
 > gen 24
 > gen 25
 > gen 26
 > gen 27
 > gen 28
 > gen 29
 > gen 30
 > gen 31
 > gen 32
 > gen 33
 > gen 34
 > gen 35
 > gen 36
 > gen 37
 > gen 38
 > gen 39
 > gen 40
 > gen 41
 > gen 42
 > gen 43
 > gen 44
 > gen 45
 > gen 46
 > gen 47
 > gen 48
 > gen 49
 > gen 50
 > gen 51
 > gen 52
 > gen 53
 > gen 54
 > gen 55
 > gen 56
 > gen 57
 > gen 58
 > gen 59
 > gen 60
 > gen 61
 > gen 62
 > gen 63
 > gen 64
 > gen 65
 > gen 66
 > gen 67
 > gen 68
 > gen 69
 > gen 70
 > gen 71
 > gen 72
 > gen 73
 > gen 74
 > gen 75
 > gen 76
 > gen 77
 > gen 78
 > gen 79
 > gen 80
 > gen 81
 > gen 82
 > gen 83
 > gen 84
 > gen 85
 > gen 86
 > gen 87
 > gen 88
 > gen 89
 > gen 90
 > gen 91
 > gen 92
 > gen 93
 > gen 94
 > gen 95
 > gen 96
 > gen 97
 > gen 98
 > gen 99
 > gen 100
 > gen 101
 > gen 102
 > gen 103
 > gen 104
 > gen 105
 > gen 106
 > gen 107
 > gen 108
 > gen 109
 > gen 110
done! Solution: f=128, s=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Measure Mode: memory
Thread ID: 78473190
Fiber ID: 79231590
Total: 3240.563477
Sort by: self_time

 %self      total      self      wait     child     calls  name
 43.16   2076.149  1398.529     0.000   677.620    11100   Object#crossover
 25.66    831.617   831.617     0.000     0.000    33400   Hash#[]=
 20.91    677.491   677.491     0.000     0.000  2876140   String#[]
  1.36     47.410    44.062     0.000     3.348      112   Array#initialize
  0.28   3189.130     8.965     0.000  3180.165      223   Array#each
  0.08      2.660     2.551     0.000     0.109      100   Range#each
  0.05   3240.563     1.777     0.000  3238.786        1   Global#[No method]
  0.02      0.609     0.500     0.000     0.109        1   Array#sort
  0.01      0.441     0.441     0.000     0.000  2854400   String#chr
  0.01      0.438     0.273     0.000     0.164  1477874   Kernel#rand
  0.01   2356.817     0.189     0.000  2356.628      111   Object#reproduce
  0.01   3238.786     0.189     0.000  3238.597        1   Object#search
  0.01      2.844     0.184     0.000     2.660      100   Enumerable#inject
  0.01      0.184     0.184     0.000     0.000    11100   Float#>=
  0.01      0.184     0.184     0.000     0.000    11100   Fixnum#modulo
  0.01      0.811     0.170     0.000     0.641    11200   Object#onemax
  0.01   3226.112     0.164     0.000  3225.948    22301  *Integer#times
  0.01      0.164     0.164     0.000     0.000    41883   Fixnum#<=>
  0.01     47.738     0.164     0.000    47.574      112   Class#new
  0.01      0.164     0.164     0.000     0.000      112   <Class::Array>#allocate
  0.01      0.164     0.164     0.000     0.000      187   Array#first
  0.01      0.164     0.164     0.000     0.000    21840   <Class::Range>#allocate
  0.01      0.164     0.164     0.000     0.000    33174   Kernel#respond_to_missing?
  0.00    271.404     0.115     0.000   271.289    11100   Object#point_mutation
  0.00      0.279     0.115     0.000     0.164    11100   Object#binary_tournament
  0.00      3.068     0.115     0.000     2.953      100   Object#random_bitstring
  0.00      0.219     0.109     0.000     0.109      111   IO#puts
  0.00      0.109     0.109     0.000     0.000      111   Fixnum#to_s
  0.00      0.328     0.109     0.000     0.219      111   Kernel#puts
  0.00      0.164     0.109     0.000     0.055      111   Array#sort!
  0.00   2356.628     0.109     0.000  2356.519      111   Enumerable#each_with_index
  0.00      0.109     0.109     0.000     0.000      222   IO#write

* indicates recursively called methods
